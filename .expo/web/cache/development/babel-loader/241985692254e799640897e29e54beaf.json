{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hamedjenabi/project/react-native-popword/src/screens/HomeScreen/HomeScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styles from \"./styles\";\nimport { firebase } from \"../../firebase/config\";\nimport Headers from \"../../Components/Headers\";\nexport default function HomeScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      entityText = _useState2[0],\n      setEntityText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entities = _useState4[0],\n      setEntities = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      show = _useState8[0],\n      setShow = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      data = _useState10[0],\n      setData = _useState10[1];\n\n  var entityRef = firebase.firestore().collection('entities');\n  var userID = props.extraData.id;\n  var navigation = useNavigation();\n\n  var onListButtonPress = function onListButtonPress() {\n    navigation.navigate('List');\n  };\n\n  var fetching = function fetching() {\n    fetch('hidden', {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-host': 'petapro-translate-v1.p.rapidapi.com',\n        'x-rapidapi-key': '0a868878b3msha696a9ae4c53aaep18f96fjsn41fe05117014'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (response) {\n      setLoading(false);\n      var result = response.slice(0, 2);\n      setData(result);\n    }).catch(function (error) {\n      Alert.alert('Error', 'Word not found', [{\n        text: 'ok',\n        onPress: function onPress() {\n          setLoading(false);\n        }\n      }]);\n    });\n  };\n\n  useEffect(function () {\n    entityRef.where('authorID', '==', userID).orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var onAddButtonPress = function onAddButtonPress() {\n    if (entityText && entityText.length > 0) {\n      var timestamp = firebase.firestore.FieldValue.serverTimestamp();\n      var _data = {\n        text: entityText,\n        authorID: userID,\n        createdAt: timestamp\n      };\n      entityRef.add(_data).then(function (_doc) {\n        setEntityText('');\n        Keyboard.dismiss();\n      }).catch(function (error) {\n        alert('error in 24',error);\n      });\n    }\n  };\n\n  var renderEntity = function renderEntity(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(View, {\n      style: styles.entityContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.entityText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, index, \". \", item.text));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Headers, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Add new entity\",\n    placeholderTextColor: \"#aaaaaa\",\n    onChangeText: function onChangeText(text) {\n      return setEntityText(text);\n    },\n    value: entityText,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onAddButtonPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Add\")), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onListButtonPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"list\"))), React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, show ? isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"#0000ff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }) : React.createElement(View, {\n    style: styles.listContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(_ref2, index) {\n      var id = _ref2.id;\n      return id;\n    },\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }, item.l2_text, \"(\", item.wortart.toLowerCase(), \") :\", ' ', item.l1_text, item.synonyme1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  })) : false)));\n}",
  "map": {
    "version": 3,
    "sources": [
      "/Users/hamedjenabi/project/react-native-popword/src/screens/HomeScreen/HomeScreen.js"
    ],
    "names": [
      "React",
      "useEffect",
      "useState",
      "useNavigation",
      "styles",
      "firebase",
      "Headers",
      "HomeScreen",
      "props",
      "entityText",
      "setEntityText",
      "entities",
      "setEntities",
      "isLoading",
      "setLoading",
      "show",
      "setShow",
      "data",
      "setData",
      "entityRef",
      "firestore",
      "collection",
      "userID",
      "extraData",
      "id",
      "navigation",
      "onListButtonPress",
      "navigate",
      "fetching",
      "fetch",
      "method",
      "headers",
      "then",
      "res",
      "json",
      "response",
      "result",
      "slice",
      "catch",
      "error",
      "Alert",
      "alert",
      "text",
      "onPress",
      "where",
      "orderBy",
      "onSnapshot",
      "querySnapshot",
      "newEntities",
      "forEach",
      "doc",
      "entity",
      "push",
      "console",
      "log",
      "onAddButtonPress",
      "length",
      "timestamp",
      "FieldValue",
      "serverTimestamp",
      "authorID",
      "createdAt",
      "add",
      "_doc",
      "Keyboard",
      "dismiss",
      "renderEntity",
      "item",
      "index",
      "entityContainer",
      "container",
      "formContainer",
      "input",
      "button",
      "buttonText",
      "flex",
      "padding",
      "listContainer",
      "l2_text",
      "wortart",
      "toLowerCase",
      "l1_text",
      "synonyme1"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import React, { useEffect, useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\n\nimport {\n  FlatList,\n  Keyboard,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport styles from './styles';\nimport { firebase } from '../../firebase/config';\nimport Headers from '../../Components/Headers';\n\nexport default function HomeScreen(props) {\n  const [entityText, setEntityText] = useState('');\n  const [entities, setEntities] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [show, setShow] = useState(false);\n  const [data, setData] = useState([]);\n\n  const entityRef = firebase.firestore().collection('entities');\n  const userID = props.extraData.id;\n  const navigation = useNavigation();\n\n  const onListButtonPress = () => {\n    navigation.navigate('List');\n  };\n\n  /*************Fetching function ********/\n\n  const fetching = () => {\n    fetch('hidden', {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-host': 'petapro-translate-v1.p.rapidapi.com',\n        'x-rapidapi-key': '0a868878b3msha696a9ae4c53aaep18f96fjsn41fe05117014',\n      },\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        setLoading(false);\n        const result = response.slice(0, 2);\n        setData(result);\n      })\n\n      .catch((error) => {\n        Alert.alert('Error', 'Word not found', [\n          {\n            text: 'ok',\n            onPress: () => {\n              setLoading(false);\n            },\n          },\n        ]);\n      });\n  };\n  /******** READ from Database ********/\n\n  useEffect(() => {\n    entityRef\n      .where('authorID', '==', userID)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot(\n        (querySnapshot) => {\n          const newEntities = [];\n          querySnapshot.forEach((doc) => {\n            const entity = doc.data();\n            entity.id = doc.id;\n            newEntities.push(entity);\n          });\n          setEntities(newEntities);\n        },\n        (error) => {\n          console.log(error);\n        },\n      );\n  }, []);\n\n  const onAddButtonPress = () => {\n    // fetching();\n    if (entityText && entityText.length > 0) {\n      const timestamp = firebase.firestore.FieldValue.serverTimestamp();\n      const data = {\n        text: entityText,\n        authorID: userID,\n        createdAt: timestamp,\n      };\n      entityRef\n        .add(data)\n        .then((_doc) => {\n          setEntityText('');\n          Keyboard.dismiss();\n        })\n        .catch((error) => {\n          alert('error in 24',error);\n        });\n    }\n  };\n\n  const renderEntity = ({ item, index }) => {\n    return (\n      <View style={styles.entityContainer}>\n        <Text style={styles.entityText}>\n          {index}. {item.text}\n        </Text>\n      </View>\n    );\n  };\n\n  return (\n    <>\n      <Headers />\n      <View style={styles.container}>\n        <View style={styles.formContainer}>\n          <TextInput\n            style={styles.input}\n            placeholder=\"Add new entity\"\n            placeholderTextColor=\"#aaaaaa\"\n            onChangeText={(text) => setEntityText(text)}\n            value={entityText}\n            underlineColorAndroid=\"transparent\"\n            autoCapitalize=\"none\"\n          />\n          <TouchableOpacity style={styles.button} onPress={onAddButtonPress}>\n            <Text style={styles.buttonText}>Add</Text>\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.button} onPress={onListButtonPress}>\n            <Text style={styles.buttonText}>list</Text>\n          </TouchableOpacity>\n        </View>\n        <View style={{ flex: 1, padding: 24 }}>\n          {show ? (\n            isLoading ? (\n              <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n            ) : (\n              <View style={styles.listContainer}>\n                <FlatList\n                  data={data}\n                  keyExtractor={({ id }, index) => id}\n                  renderItem={({ item }) => (\n                    <Text>\n                      {item.l2_text}({item.wortart.toLowerCase()}) :{' '}\n                      {item.l1_text}\n                      {item.synonyme1}\n                    </Text>\n                  )}\n                />\n              </View>\n            )\n          ) : (\n            false\n          )}\n        </View>\n        {/* {entities && (\n        <View style={styles.listContainer}>\n          <FlatList\n            data={entities}\n            renderItem={renderEntity}\n            keyExtractor={(item) => item.id}\n            removeClippedSubviews={true}\n          />\n        </View>\n      )} */}\n      </View>\n    </>\n  );\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
