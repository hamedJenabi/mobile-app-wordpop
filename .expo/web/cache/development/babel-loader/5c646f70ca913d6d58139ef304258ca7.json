{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hamedjenabi/project/react-native-popword/src/screens/ListScreen/ListScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport { firebase } from \"../../firebase/config\";\nimport Headers from \"../../Components/Headers\";\nexport default function ListScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      entityText = _useState2[0],\n      setEntityText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entities = _useState4[0],\n      setEntities = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      show = _useState8[0],\n      setShow = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      data = _useState10[0],\n      setData = _useState10[1];\n\n  var entityRef = firebase.firestore().collection('entities');\n  var userID = props.extraData.id;\n  useEffect(function () {\n    entityRef.where('authorID', '==', userID).orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var renderEntity = function renderEntity(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(View, {\n      style: styles.entityContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.entityText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, index, \". \", item.text));\n  };\n\n  var closeRow = function closeRow(rowMap, rowKey) {\n    if (rowMap[rowKey]) {\n      rowMap[rowKey].closeRow();\n    }\n  };\n\n  var deleteRow = function deleteRow(rowMap, rowKey) {\n    closeRow(rowMap, rowKey);\n\n    var newData = _toConsumableArray(listData);\n\n    var prevIndex = listData.findIndex(function (item) {\n      return item.key === rowKey;\n    });\n    newData.splice(prevIndex, 1);\n    setListData(newData);\n  };\n\n  var onRowDidOpen = function onRowDidOpen(rowKey) {\n    console.log('This row opened', rowKey);\n  };\n\n  var renderHiddenItem = function renderHiddenItem(data, rowMap) {\n    return React.createElement(View, {\n      style: styles.rowBack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, \"Remind me\"), React.createElement(TouchableOpacity, {\n      style: [styles.backRightBtn, styles.backRightBtnLeft],\n      onPress: function onPress() {\n        return closeRow(rowMap, data.item.key);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.backTextWhite,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Close\")), React.createElement(TouchableOpacity, {\n      style: [styles.backRightBtn, styles.backRightBtnRight],\n      onPress: function onPress() {\n        return deleteRow(rowMap, data.item.key);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.backTextWhite,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"Delete\")));\n  };\n\n  return React.createElement(React.Fragment, null, entities && React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, React.createElement(SwipeListView, {\n    data: entities,\n    renderItem: renderEntity,\n    renderHiddenItem: renderHiddenItem,\n    leftOpenValue: 75,\n    rightOpenValue: -150,\n    previewRowKey: '0',\n    previewOpenValue: -40,\n    previewOpenDelay: 3000,\n    onRowDidOpen: onRowDidOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  listContainer: {\n    marginTop: 20,\n    padding: 20\n  },\n  container: {\n    backgroundColor: 'white',\n    flex: 1\n  },\n  backTextWhite: {\n    color: '#FFF'\n  },\n  rowFront: {\n    alignItems: 'center',\n    backgroundColor: '#CCC',\n    borderBottomColor: 'black',\n    borderBottomWidth: 1,\n    justifyContent: 'center',\n    height: 50\n  },\n  rowBack: {\n    alignItems: 'center',\n    backgroundColor: '#DDD',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingLeft: 15\n  },\n  backRightBtn: {\n    alignItems: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    position: 'absolute',\n    top: 0,\n    width: 75\n  },\n  backRightBtnLeft: {\n    backgroundColor: 'blue',\n    right: 75\n  },\n  backRightBtnRight: {\n    backgroundColor: 'red',\n    right: 0\n  }\n});","map":{"version":3,"sources":["/Users/hamedjenabi/project/react-native-popword/src/screens/ListScreen/ListScreen.js"],"names":["React","useEffect","useState","SwipeListView","firebase","Headers","ListScreen","props","entityText","setEntityText","entities","setEntities","isLoading","setLoading","show","setShow","data","setData","entityRef","firestore","collection","userID","extraData","id","where","orderBy","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","push","error","console","log","renderEntity","item","index","styles","entityContainer","text","closeRow","rowMap","rowKey","deleteRow","newData","listData","prevIndex","findIndex","key","splice","setListData","onRowDidOpen","renderHiddenItem","rowBack","backRightBtn","backRightBtnLeft","backTextWhite","backRightBtnRight","container","StyleSheet","create","listContainer","marginTop","padding","backgroundColor","flex","color","rowFront","alignItems","borderBottomColor","borderBottomWidth","justifyContent","height","flexDirection","paddingLeft","bottom","position","top","width","right"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  FlatList,\n  Keyboard,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n} from 'react-native';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport { firebase } from '../../firebase/config';\nimport Headers from '../../Components/Headers';\n\nexport default function ListScreen(props) {\n  const [entityText, setEntityText] = useState('');\n  const [entities, setEntities] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [show, setShow] = useState(false);\n  const [data, setData] = useState([]);\n\n  const entityRef = firebase.firestore().collection('entities');\n  const userID = props.extraData.id;\n\n  useEffect(() => {\n    entityRef\n      .where('authorID', '==', userID)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot(\n        (querySnapshot) => {\n          const newEntities = [];\n          querySnapshot.forEach((doc) => {\n            const entity = doc.data();\n            entity.id = doc.id;\n            newEntities.push(entity);\n          });\n          setEntities(newEntities);\n        },\n        (error) => {\n          console.log(error);\n        },\n      );\n  }, []);\n  const renderEntity = ({ item, index }) => {\n    return (\n      <View style={styles.entityContainer}>\n        <Text style={styles.entityText}>\n          {index}. {item.text}\n        </Text>\n      </View>\n    );\n  };\n\n  /********SWIPE *********/\n  const closeRow = (rowMap, rowKey) => {\n    if (rowMap[rowKey]) {\n      rowMap[rowKey].closeRow();\n    }\n  };\n  const deleteRow = (rowMap, rowKey) => {\n    closeRow(rowMap, rowKey);\n    const newData = [...listData];\n    const prevIndex = listData.findIndex((item) => item.key === rowKey);\n    newData.splice(prevIndex, 1);\n    setListData(newData);\n  };\n\n  const onRowDidOpen = (rowKey) => {\n    console.log('This row opened', rowKey);\n  };\n\n  const renderHiddenItem = (data, rowMap) => (\n    <View style={styles.rowBack}>\n      <Text>Remind me</Text>\n      <TouchableOpacity\n        style={[styles.backRightBtn, styles.backRightBtnLeft]}\n        onPress={() => closeRow(rowMap, data.item.key)}\n      >\n        <Text style={styles.backTextWhite}>Close</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        style={[styles.backRightBtn, styles.backRightBtnRight]}\n        onPress={() => deleteRow(rowMap, data.item.key)}\n      >\n        <Text style={styles.backTextWhite}>Delete</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  /*************RETURN*********/\n  return (\n    <>\n      {entities && (\n        <View style={styles.container}>\n          <SwipeListView\n            data={entities}\n            renderItem={renderEntity}\n            renderHiddenItem={renderHiddenItem}\n            leftOpenValue={75}\n            rightOpenValue={-150}\n            previewRowKey={'0'}\n            previewOpenValue={-40}\n            previewOpenDelay={3000}\n            onRowDidOpen={onRowDidOpen}\n          />\n        </View>\n      )}\n      {/* {entities && (\n        <View style={styles.listContainer}>\n          <FlatList\n            data={entities}\n            renderItem={renderEntity}\n            keyExtractor={(item) => item.id}\n            removeClippedSubviews={true}\n          />\n        </View>\n      )} */}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  listContainer: {\n    marginTop: 20,\n    padding: 20,\n  },\n  container: {\n    backgroundColor: 'white',\n    flex: 1,\n  },\n  backTextWhite: {\n    color: '#FFF',\n  },\n  rowFront: {\n    alignItems: 'center',\n    backgroundColor: '#CCC',\n    borderBottomColor: 'black',\n    borderBottomWidth: 1,\n    justifyContent: 'center',\n    height: 50,\n  },\n  rowBack: {\n    alignItems: 'center',\n    backgroundColor: '#DDD',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingLeft: 15,\n  },\n  backRightBtn: {\n    alignItems: 'center',\n    bottom: 0,\n    justifyContent: 'center',\n    position: 'absolute',\n    top: 0,\n    width: 75,\n  },\n  backRightBtnLeft: {\n    backgroundColor: 'blue',\n    right: 75,\n  },\n  backRightBtnRight: {\n    backgroundColor: 'red',\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}